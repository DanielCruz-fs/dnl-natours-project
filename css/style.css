/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/

/* Reset normalization */
* {
  margin: 0px;
  padding: 0px;
  /* It changes the box model so that the borders and the paddings are no longer added
     to the total width or the total height that we specify fot a box*/
  box-sizing: border-box;
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400px;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

/****** HEADER ******/ 
.header { 
  /* At every point of view it will take 95% of the view port*/
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 131, 0.8)),
                    url(../img/hero.jpg);
  /* What cover does is that whatever the width of the viewport, or the element, it'll always try to fit
    the element inside of the box. */
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);

  /* Always put position relative 'cause it's the parent */
  position: relative;
}

.logo-box {
  position: absolute;
  /* We can play with position, the origin reference it's the parent */
  top: 40px;
  left: 40px;
}

.logo {
  /* The width of the image is handled by the browser */
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  /* Transform is used for: translate the position of an element itself*/
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* Hack to fix an animation that shakes */
  /* backface-visibility: hidden; */

  margin-bottom: 60px;
}

.heading-primary-main {
  /* Span is default an inline element so we change it */
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;

  /* Applying keyframe animation */
  animation-name: moveInLeft;
  animation-duration: 1s;
  /* This controls the animation's workflow */
  animation-timing-function: ease-out;
  /* other useful properties to animate */
  /* animation-delay: 3s;
  animation-iteration-count: 3; */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  /* Check how you import the fonts in head tag, there you have the weight range */
  font-weight: 700;
  letter-spacing: 19.4px;
  /* Applying animation shorthand */
  animation: moveInRight 1s ease-out;
}

/* There are 2 types of animation: using transition and key frames */
@keyframes moveInLeft {
  /* start */
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  /* any % that we want */
  80% {
    transform: translateX(10px);
  }
  /* end */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  /* start */
  0% {
    opacity: 0;
    transform: translateX(100px);
  }
  /* any % that we want */
  80% {
    transform: translateX(-10px);
  }
  /* end */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInBottom {
  /* start */
  0% {
    opacity: 0;
    transform: translateY(40px);
  }
  /* end */
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
/* PSEUDO ELEMENTS AND CLASSES */
/* Pseudo classes are special state of the selector: :link */
.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;
  /* CSS transitions allows you to change property values smoothly, over a given duration */
  transition: all .2s;

  position: relative;
}

.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* Active when it is clicked */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

/* Pseudo ELEMENTS */
.btn::after {
  content: "";
  /* we want it to look the same as our original button */
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /* Transitions always at initial state */
  transition: all .4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  /* For fading something out */
  opacity: 0;
}

.btn-animated {
  animation: moveInBottom .5s ease-out .75s;
  /* For animation with delays initial values */
  animation-fill-mode: backwards;
}