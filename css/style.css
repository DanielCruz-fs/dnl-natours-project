/*
COLORS:
Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485
*/
/* BEM RULE FOR NOTATION:
   BLOCK: Standalone component that is meaningful on its own
   ELEMETN: Part of a block that has no standalone meaning
   MODIFIER: A different version of a block or an element 
   .block {}
   .block__element {}
   .block__element--modifier {} */
/* FOR ARCHITECTURE USE 7-1 PATTERN
   7 Different folders for partial Sass files, and 1 main Sass file to import
   other files into a complied CSS stylesheet */
/* There are 2 types of animation: using transition and key frames */
@keyframes moveInLeft {
  /* start */
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  /* any % that we want */
  80% {
    transform: translateX(1rem); }
  /* end */
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  /* start */
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  /* any % that we want */
  80% {
    transform: translateX(-1rem); }
  /* end */
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  /* start */
  0% {
    opacity: 0;
    transform: translateY(4rem); }
  /* end */
  100% {
    opacity: 1;
    transform: translateY(0); } }

/* Reset normalization */
*, *::after, *::before {
  margin: 0px;
  padding: 0px;
  /* It changes the box model so that the borders and the paddings are no longer added
     to the total width or the total height that we specify for a box*/
  /* Example: without box-sizing default total width: rb + rp + specified width + lp + lb */
  /* With border box: total width: specified width */
  box-sizing: border-box; }

/* The root font size is set in the HTML */
/* GLOBAL FONT SIZE CONFIGURATION using REM relative unit*/
html {
  /* 1 rem is exactly the root size (1rem == 10px) */
  /* Now to convert all units all we need to do is divide by 10px simple calculation otherwise */
  /* Default size of the browser is 16px if we leave this as it is
     the user will not be able to zoom in or our from the explorer */
  /* font-size: 10px; */
  /* Solution: use percentage % (10px x (100%/16px)) */
  font-size: 62.5%; }

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* Hack to fix an animation that shakes */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    /* Span is default an inline element so we change it */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    /* Applying keyframe animation */
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* This controls the animation's workflow */
    animation-timing-function: ease-out;
    /* other useful properties to animate */
    /* animation-delay: 3s;
    animation-iteration-count: 3; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    /* Check how you import the fonts in head tag, there you have the weight range */
    font-weight: 700;
    letter-spacing: 1.95rem;
    /* Applying animation shorthand */
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: unset;
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.u-center-text {
  text-align: center; }

.u-margin-bottom-8 {
  margin-bottom: 8rem; }

.btn {
  /* PSEUDO ELEMENTS AND CLASSES */
  /* Pseudo classes are special state of the selector: :link */
  /* Active when it is clicked */
  /* Pseudo ELEMENTS */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    /* CSS transitions allows you to change property values smoothly, over a given duration */
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      /* For fading something out */
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    /* we want it to look the same as our original button */
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* Transitions always at initial state */
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* For animation with delays initial values */
    animation-fill-mode: backwards; }

.row {
  max-width: 114rem;
  margin: 0 auto; }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

/****** HEADER ******/
.header {
  /* At every point of view it will take 95% of the view port*/
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* What cover does is that whatever the width of the viewport, or the element, it'll always try to fit
    the element inside of the box. */
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* Always put position relative 'cause it's the parent */
  position: relative; }
  .header__logo-box {
    position: absolute;
    /* We can play with position, the origin reference it's the parent */
    top: 4rem;
    left: 4rem; }
  .header__logo {
    /* The width of the image is handled by the browser */
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* Transform is used for: translate the position of an element itself*/
    transform: translate(-50%, -50%);
    text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
